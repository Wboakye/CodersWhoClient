{"ast":null,"code":"import _objectSpread from \"/Users/william/Desktop/codersWho/coderswhoclient/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/william/Desktop/codersWho/coderswhoclient/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/william/Desktop/codersWho/coderswhoclient/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/william/Desktop/codersWho/coderswhoclient/src/components/PrivateRoute.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport store from '../redux/store';\nimport axios from 'axios';\nimport { setUser } from '../actions/user-actions';\n\nconst jwtDecode = require('jwt-decode');\n\nconst host = 'http://localhost:3005';\n\nconst PrivateRoute = (_ref) => {\n  let Component = _ref.component,\n      isAuthenticated = _ref.isAuthenticated,\n      isLoading = _ref.isLoading,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"isAuthenticated\", \"isLoading\"]);\n\n  const _React$useState = React.useState({\n    isAuthenticated: false,\n    isLoading: true\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const getUser = () => {\n    let token = sessionStorage.getItem('CWJWT');\n    let decodedToken = jwtDecode(token);\n    axios({\n      url: host + '/api/user/profile',\n      method: 'POST',\n      headers: {\n        'auth-token': token\n      },\n      data: {\n        userID: decodedToken._id\n      }\n    }).then(response => {\n      store.dispatch(setUser(response.data.body));\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  useEffect(() => {\n    //IF ALREADY AUTHENTICATED IN STORE, AUTHENTICATED\n    if (store.getState().auth.isLoginSuccess) {\n      setState({\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } else {\n      //IF JWT AVAILABLE, VALIDATE\n      if (sessionStorage.getItem('CWJWT')) {\n        let token = sessionStorage.getItem('CWJWT');\n        axios({\n          url: host + '/api/user/authenticate',\n          method: 'POST',\n          headers: {\n            'auth-token': token\n          }\n        }).then(response => {\n          if (response.data.success === true) {\n            getUser();\n          }\n\n          setState(_objectSpread({}, state, {\n            isAuthenticated: response.data.success\n          }));\n          setState(_objectSpread({}, state, {\n            isLoading: false\n          }));\n        }).catch(function (error) {\n          alert(error);\n          setState({\n            isLoading: false\n          });\n        });\n      } else {\n        setState(_objectSpread({}, state, {\n          isLoading: false\n        }));\n      }\n    }\n  }, []);\n\n  if (state.isLoading) {}\n\n  if (!store.getState().auth.isLoginSuccess) {\n    return React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Component, Object.assign({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nexport { PrivateRoute };","map":{"version":3,"sources":["/Users/william/Desktop/codersWho/coderswhoclient/src/components/PrivateRoute.js"],"names":["React","useEffect","useState","Redirect","store","axios","setUser","jwtDecode","require","host","PrivateRoute","Component","component","isAuthenticated","isLoading","rest","state","setState","getUser","token","sessionStorage","getItem","decodedToken","url","method","headers","data","userID","_id","then","response","dispatch","body","catch","error","alert","getState","auth","isLoginSuccess","success"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Redirect} from \"react-router-dom\"\nimport store from '../redux/store'\nimport axios from 'axios';\nimport { setUser } from '../actions/user-actions'\n\nconst jwtDecode = require('jwt-decode')\n\nconst host = 'http://localhost:3005';\n\n\nconst PrivateRoute = ({component: Component, isAuthenticated, isLoading, ...rest }) => { \n\n\n    const [state, setState] = React.useState({\n        isAuthenticated: false,\n        isLoading: true\n      });\n\n      const getUser = () => {\n        let token = sessionStorage.getItem('CWJWT');\n          let decodedToken = jwtDecode(token)\n              axios({\n                url: host + '/api/user/profile',\n                method: 'POST',\n                headers: {\n                  'auth-token': token,\n                },\n                data: { userID: decodedToken._id },\n              }).then( (response) => {\n                 store.dispatch(setUser(response.data.body));\n              })\n              .catch(function (error) {\n                alert(error);\n              }); \n      }\n\n      useEffect(() => {\n        //IF ALREADY AUTHENTICATED IN STORE, AUTHENTICATED\n        if(store.getState().auth.isLoginSuccess){\n            setState({isAuthenticated: true, isLoading: false});\n          }else{\n            //IF JWT AVAILABLE, VALIDATE\n            if(sessionStorage.getItem('CWJWT')){\n              let token = sessionStorage.getItem('CWJWT');\n              axios({\n                url: host + '/api/user/authenticate',\n                method: 'POST',\n                headers: {\n                  'auth-token': token,\n                },\n              }).then( (response) => {\n                if(response.data.success === true){\n                  getUser()\n                }                 \n                  setState({...state, isAuthenticated: response.data.success});\n                  setState({...state, isLoading: false});\n              })\n              .catch(function (error) {\n                alert(error);\n                setState({isLoading: false});\n              });\n            }else{\n              setState({...state, isLoading: false });\n            }\n          }\n      }, []);\n\n           if(state.isLoading) {\n            }\n            if(!store.getState().auth.isLoginSuccess) {\n                return <Redirect to=\"/login\" />\n            }\n            return <Component {...rest} /> \n} \n\nexport { PrivateRoute }"]},"metadata":{},"sourceType":"module"}