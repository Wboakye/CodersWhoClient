{"ast":null,"code":"import axios from \"axios\";\nimport history from \"../history\";\nimport * as c from \"../redux/constants\";\nimport store from \"../redux/store\";\nimport { setUser } from \"./user-actions\";\n\nconst jwtDecode = require(\"jwt-decode\");\n\nconst host = \"http://localhost:3005\"; //LOGIN\n\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n    callLoginApi(username, password, (data, error) => {\n      dispatch(setLoginPending(false));\n\n      if (!error) {\n        console.log(data);\n\n        if (data.success === true) {\n          dispatch(setUserToken(data.token));\n          dispatch(setLoginSuccess(true)); //GET PROFILE INFORMATION, STORE IN REDUX STORE\n\n          let token = sessionStorage.getItem(\"CWJWT\");\n          let decodedToken = jwtDecode(token);\n          axios({\n            url: host + \"/api/user/profile\",\n            method: \"POST\",\n            headers: {\n              \"auth-token\": token\n            },\n            data: {\n              userId: decodedToken._id\n            }\n          }).then(response => {\n            store.dispatch(setUser(response.data.body));\n            history.push(\"/home\");\n          }).catch(function (error) {\n            alert(error);\n            console.log(\"ERROR\");\n          });\n        } else {\n          dispatch(setLoginError(data.message));\n          alert(data.message);\n        }\n      } else {\n        dispatch(setLoginError(data.message));\n        alert(data.message);\n      }\n    });\n  };\n}\nexport function logout() {\n  return dispatch => {\n    sessionStorage.removeItem(\"CWJWT\");\n    dispatch(setLoginSuccess(false));\n    history.push(\"/\");\n  };\n}\nexport function setLogged(input) {\n  return dispatch => {\n    dispatch(setLoginSuccess(input));\n  };\n} //VERIFY THAT A USER IS LOGGED IN\n\nexport function verifyLoggedIn(redirect) {\n  if (store.getState().auth.isLoginSuccess) {\n    if (redirect) {\n      history.push(\"/home\");\n    }\n\n    return true;\n  } else {\n    if (sessionStorage.getItem(\"CWJWT\")) {\n      let token = sessionStorage.getItem(\"CWJWT\");\n      axios({\n        url: host + \"/api/user/authenticate\",\n        method: \"POST\",\n        headers: {\n          \"auth-token\": token\n        }\n      }).then(response => {\n        store.dispatch(setLoginSuccess(true));\n\n        if (redirect) {\n          history.push(\"/home\");\n        }\n\n        return true;\n      }).catch(function (error) {\n        alert(error);\n        console.log(\"ERROR\");\n        return false;\n      });\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction setLoginPending(isLoginPending) {\n  return {\n    type: c.SET_LOGIN_PENDING,\n    isLoginPending\n  };\n}\n\nfunction setLoginSuccess(isLoginSuccess) {\n  return {\n    type: c.SET_LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n}\n\nfunction setLoginError(loginError) {\n  return {\n    type: c.SET_LOGIN_ERROR,\n    loginError\n  };\n}\n\nfunction setUserToken(token) {\n  return {\n    type: c.SET_USER_TOKEN,\n    token\n  };\n}\n\nfunction callLoginApi(username, password, callback) {\n  axios.post(host + \"/api/user/login\", {\n    username: username,\n    password: password\n  }).then(response => {\n    console.log(response);\n    sessionStorage.setItem(\"CWJWT\", response.data.token);\n    return callback(response.data, null);\n  }).catch(function (error) {\n    console.log(null, error);\n    return callback(new Error(\"Invalid email and password\"));\n  });\n}","map":{"version":3,"sources":["/Users/william/Desktop/codersWho/coderswhoclient/src/actions/auth-actions.js"],"names":["axios","history","c","store","setUser","jwtDecode","require","host","login","username","password","dispatch","setLoginPending","setLoginSuccess","setLoginError","callLoginApi","data","error","console","log","success","setUserToken","token","sessionStorage","getItem","decodedToken","url","method","headers","userId","_id","then","response","body","push","catch","alert","message","logout","removeItem","setLogged","input","verifyLoggedIn","redirect","getState","auth","isLoginSuccess","isLoginPending","type","SET_LOGIN_PENDING","SET_LOGIN_SUCCESS","loginError","SET_LOGIN_ERROR","SET_USER_TOKEN","callback","post","setItem","Error"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport history from \"../history\";\n\nimport * as c from \"../redux/constants\";\nimport store from \"../redux/store\";\nimport { setUser } from \"./user-actions\";\n\nconst jwtDecode = require(\"jwt-decode\");\nconst host = \"http://localhost:3005\";\n\n//LOGIN\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n\n    callLoginApi(username, password, (data, error) => {\n      dispatch(setLoginPending(false));\n      if (!error) {\n        console.log(data);\n        if (data.success === true) {\n          dispatch(setUserToken(data.token));\n          dispatch(setLoginSuccess(true));\n          //GET PROFILE INFORMATION, STORE IN REDUX STORE\n          let token = sessionStorage.getItem(\"CWJWT\");\n          let decodedToken = jwtDecode(token);\n          axios({\n            url: host + \"/api/user/profile\",\n            method: \"POST\",\n            headers: {\n              \"auth-token\": token\n            },\n            data: { userId: decodedToken._id }\n          })\n            .then(response => {\n              store.dispatch(setUser(response.data.body));\n              history.push(\"/home\");\n            })\n            .catch(function(error) {\n              alert(error);\n              console.log(\"ERROR\");\n            });\n        } else {\n          dispatch(setLoginError(data.message));\n          alert(data.message);\n        }\n      } else {\n        dispatch(setLoginError(data.message));\n        alert(data.message);\n      }\n    });\n  };\n}\n\nexport function logout() {\n  return dispatch => {\n    sessionStorage.removeItem(\"CWJWT\");\n    dispatch(setLoginSuccess(false));\n    history.push(\"/\");\n  };\n}\n\nexport function setLogged(input) {\n  return dispatch => {\n    dispatch(setLoginSuccess(input));\n  };\n}\n\n//VERIFY THAT A USER IS LOGGED IN\nexport function verifyLoggedIn(redirect) {\n  if (store.getState().auth.isLoginSuccess) {\n    if (redirect) {\n      history.push(\"/home\");\n    }\n    return true;\n  } else {\n    if (sessionStorage.getItem(\"CWJWT\")) {\n      let token = sessionStorage.getItem(\"CWJWT\");\n      axios({\n        url: host + \"/api/user/authenticate\",\n        method: \"POST\",\n        headers: {\n          \"auth-token\": token\n        }\n      })\n        .then(response => {\n          store.dispatch(setLoginSuccess(true));\n          if (redirect) {\n            history.push(\"/home\");\n          }\n          return true;\n        })\n        .catch(function(error) {\n          alert(error);\n          console.log(\"ERROR\");\n          return false;\n        });\n    } else {\n      return false;\n    }\n  }\n}\n\nfunction setLoginPending(isLoginPending) {\n  return {\n    type: c.SET_LOGIN_PENDING,\n    isLoginPending\n  };\n}\n\nfunction setLoginSuccess(isLoginSuccess) {\n  return {\n    type: c.SET_LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n}\n\nfunction setLoginError(loginError) {\n  return {\n    type: c.SET_LOGIN_ERROR,\n    loginError\n  };\n}\n\nfunction setUserToken(token) {\n  return {\n    type: c.SET_USER_TOKEN,\n    token\n  };\n}\n\nfunction callLoginApi(username, password, callback) {\n  axios\n    .post(host + \"/api/user/login\", {\n      username: username,\n      password: password\n    })\n    .then(response => {\n      console.log(response);\n      sessionStorage.setItem(\"CWJWT\", response.data.token);\n      return callback(response.data, null);\n    })\n    .catch(function(error) {\n      console.log(null, error);\n      return callback(new Error(\"Invalid email and password\"));\n    });\n}\n"]},"metadata":{},"sourceType":"module"}