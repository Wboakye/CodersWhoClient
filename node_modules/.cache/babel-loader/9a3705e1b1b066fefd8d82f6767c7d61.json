{"ast":null,"code":"import axios from 'axios';\nimport * as c from '../redux/constants';\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n    callLoginApi(username, password, error => {\n      dispatch(setLoginPending(false));\n\n      if (!error) {\n        dispatch(setLoginSuccess(true));\n      } else {\n        dispatch(setLoginError(error));\n      }\n    });\n  };\n}\n\nfunction setLoginPending(isLoginPending) {\n  return {\n    type: c.SET_LOGIN_PENDING,\n    isLoginPending\n  };\n}\n\nfunction setLoginSuccess(isLoginSuccess) {\n  return {\n    type: c.SET_LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n}\n\nfunction setLoginError(loginError) {\n  return {\n    type: c.SET_LOGIN_ERROR,\n    loginError\n  };\n}\n\nfunction setUserToken(token) {\n  return {\n    type: c.SET_USER_TOKEN,\n    token\n  };\n}\n\nfunction callLoginApi(username, password, callback) {\n  setTimeout(() => {\n    if (username === 'admin' && password === 'admin') {\n      return callback(null);\n    } else {\n      return callback(new Error('Invalid username and password'));\n    }\n  }, 1000);\n}","map":{"version":3,"sources":["/Users/william/Desktop/codersWho/coderswhoclient/src/actions/auth-actions.js"],"names":["axios","c","login","username","password","dispatch","setLoginPending","setLoginSuccess","setLoginError","callLoginApi","error","isLoginPending","type","SET_LOGIN_PENDING","isLoginSuccess","SET_LOGIN_SUCCESS","loginError","SET_LOGIN_ERROR","setUserToken","token","SET_USER_TOKEN","callback","setTimeout","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,CAAZ,MAAmB,oBAAnB;AAGA,OAAO,SAASC,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AACxC,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAD,IAAAA,QAAQ,CAACE,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAF,IAAAA,QAAQ,CAACG,aAAa,CAAC,IAAD,CAAd,CAAR;AAEAC,IAAAA,YAAY,CAACN,QAAD,EAAWC,QAAX,EAAqBM,KAAK,IAAI;AACxCL,MAAAA,QAAQ,CAACC,eAAe,CAAC,KAAD,CAAhB,CAAR;;AACA,UAAI,CAACI,KAAL,EAAY;AACVL,QAAAA,QAAQ,CAACE,eAAe,CAAC,IAAD,CAAhB,CAAR;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACG,aAAa,CAACE,KAAD,CAAd,CAAR;AACD;AACF,KAPW,CAAZ;AAQD,GAbD;AAcD;;AAED,SAASJ,eAAT,CAAyBK,cAAzB,EAAyC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEX,CAAC,CAACY,iBADH;AAELF,IAAAA;AAFK,GAAP;AAID;;AAED,SAASJ,eAAT,CAAyBO,cAAzB,EAAyC;AACvC,SAAO;AACLF,IAAAA,IAAI,EAAEX,CAAC,CAACc,iBADH;AAELD,IAAAA;AAFK,GAAP;AAID;;AAED,SAASN,aAAT,CAAuBQ,UAAvB,EAAmC;AACjC,SAAO;AACLJ,IAAAA,IAAI,EAAEX,CAAC,CAACgB,eADH;AAELD,IAAAA;AAFK,GAAP;AAID;;AAED,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAO;AACLP,IAAAA,IAAI,EAAEX,CAAC,CAACmB,cADH;AAELD,IAAAA;AAFK,GAAP;AAID;;AAED,SAASV,YAAT,CAAsBN,QAAtB,EAAgCC,QAAhC,EAA0CiB,QAA1C,EAAoD;AAClDC,EAAAA,UAAU,CAAC,MAAM;AACf,QAAInB,QAAQ,KAAK,OAAb,IAAwBC,QAAQ,KAAK,OAAzC,EAAkD;AAChD,aAAOiB,QAAQ,CAAC,IAAD,CAAf;AACD,KAFD,MAEO;AACL,aAAOA,QAAQ,CAAC,IAAIE,KAAJ,CAAU,+BAAV,CAAD,CAAf;AACD;AACF,GANS,EAMP,IANO,CAAV;AAOD","sourcesContent":["import axios from 'axios'\n\nimport * as c from '../redux/constants'\n\n\nexport function login(username, password) {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n\n    callLoginApi(username, password, error => {\n      dispatch(setLoginPending(false));\n      if (!error) {\n        dispatch(setLoginSuccess(true));\n      } else {\n        dispatch(setLoginError(error));\n      }\n    });\n  }\n}\n\nfunction setLoginPending(isLoginPending) {\n  return {\n    type: c.SET_LOGIN_PENDING,\n    isLoginPending\n  };\n}\n\nfunction setLoginSuccess(isLoginSuccess) {\n  return {\n    type: c.SET_LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n}\n\nfunction setLoginError(loginError) {\n  return {\n    type: c.SET_LOGIN_ERROR,\n    loginError\n  }\n}\n\nfunction setUserToken(token) {\n  return {\n    type: c.SET_USER_TOKEN,\n    token\n  }\n}\n\nfunction callLoginApi(username, password, callback) {\n  setTimeout(() => {\n    if (username === 'admin' && password === 'admin') {\n      return callback(null);\n    } else {\n      return callback(new Error('Invalid username and password'));\n    }\n  }, 1000);\n}\n"]},"metadata":{},"sourceType":"module"}